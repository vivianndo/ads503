degenerateColNames <- colnames(df[degenerateCols])
degenerateColNum <- length(degenerateColNames)
cat("These are ", degenerateColNum, " degenerated predictors:\n", degenerateColNames)
#subset the degenerated predictors
df_degenerated <- df[,degenerateColNames]
colnames(df_degenerated)
# Check the distribution of the degenerated predictors
summary(df_degenerated)
# Use nearZeroVar function to filter out low variance features
df<- df[, -degenerateCols]
dim(df)
colnames(df)
admissionsourceRemoved <- c(9,17,20)
df$admission_source_id[df$admission_source_id %in% admissionsourceRemoved] <- NA
admissiontypeRemoved <- c(6,8)
df$admission_type_id[df$admission_type_id %in% admissiontypeRemoved] <- NA
table(df$admission_source_id)
sum(is.na(df$admission_source_id))
# Check null values
#Show null counts
null_counts <- sort(colSums(is.na(df)), decreasing=TRUE)
head(null_counts,10)
#Show proportion of null counts
nullProp <- sort(colMeans(is.na(df)), decreasing=TRUE)
head(nullProp,10)
df<- subset(df, select = -c(weight, medical_specialty, payer_code))
# Convert to numeric
df$diag_1 <- as.numeric(df$diag_1)
df$diag_2 <- as.numeric(df$diag_2)
df$diag_3 <- as.numeric(df$diag_3)
# Show distributions of diagnoses
par(mfrow=c(1,3))
hist(df$diag_1)
hist(df$diag_2)
hist(df$diag_3)
summary(df$diag_1)
library(dplyr)
df <- df %>%
mutate(primary_diagnosis = case_when(
substr(diag_1, 1, 3) == "250" ~ "Diabetes",
#between(as.numeric(diag_1), 001, 139) ~ "Infectious and Parasitic Diseases",
between(as.numeric(diag_1), 140, 239) ~ "Neoplasms",
between(as.numeric(diag_1), 320, 459) ~ "Circulatory",
between(as.numeric(diag_1), 460, 519) ~ "Respiratory",
between(as.numeric(diag_1), 520, 579) ~ "Digestive",
between(as.numeric(diag_1), 580, 629) ~ "Genitourinary System",
#between(as.numeric(diag_1), 680, 709) ~ "Skin/Subcutaneous Tissue",
between(as.numeric(diag_1), 710, 739) ~ "Musculoskeletal",
between(as.numeric(diag_1), 760, 779) ~ "Perinatal",
between(as.numeric(diag_1), 800, 999) ~ "Injury and Poisoning",
TRUE ~ "Other"
))
# Secondary Diagnosis
df <- df %>%
mutate(secondary_diagnosis = case_when(
substr(diag_2, 1, 3) == "250" ~ "Diabetes",
#between(as.numeric(diag_2), 001, 139) ~ "Infectious and Parasitic Diseases",
between(as.numeric(diag_2), 140, 239) ~ "Neoplasms",
between(as.numeric(diag_2), 320, 459) ~ "Circulatory",
between(as.numeric(diag_2), 460, 519) ~ "Respiratory",
between(as.numeric(diag_2), 520, 579) ~ "Digestive",
between(as.numeric(diag_2), 580, 629) ~ "Genitourinary System",
#between(as.numeric(diag_2), 680, 709) ~ "Skin/Subcutaneous Tissue",
between(as.numeric(diag_2), 710, 739) ~ "Musculoskeletal",
between(as.numeric(diag_2), 760, 779) ~ "Perinatal",
between(as.numeric(diag_2), 800, 999) ~ "Injury and Poisoning",
TRUE ~ "Other"
))
# Secondary Diagnosis
df <- df %>%
mutate(secondary_diagnosis2 = case_when(
substr(diag_3, 1, 3) == "250" ~ "Diabetes",
#between(as.numeric(diag_3), 001, 139) ~ "Infectious and Parasitic Diseases",
between(as.numeric(diag_3), 140, 239) ~ "Neoplasms",
between(as.numeric(diag_3), 320, 459) ~ "Circulatory",
between(as.numeric(diag_3), 460, 519) ~ "Respiratory",
between(as.numeric(diag_3), 520, 579) ~ "Digestive",
between(as.numeric(diag_3), 580, 629) ~ "Genitourinary System",
#between(as.numeric(diag_3), 680, 709) ~ "Skin/Subcutaneous Tissue",
between(as.numeric(diag_3), 710, 739) ~ "Musculoskeletal",
between(as.numeric(diag_3), 760, 779) ~ "Perinatal",
between(as.numeric(diag_3), 800, 999) ~ "Injury and Poisoning",
TRUE ~ "Other"
))
df$primary_diagnosis <- as.factor(df$primary_diagnosis)
df$secondary_diagnosis <- as.factor(df$secondary_diagnosis)
df$secondary_diagnosis2 <- as.factor(df$secondary_diagnosis2)
table(df$primary_diagnosis)
table(df$secondary_diagnosis)
table(df$secondary_diagnosis2)
df <- subset(df, select = -c(encounter_id, patient_nbr, diag_1, diag_2,diag_3, number_emergency, number_outpatient, number_inpatient, A1Cresult, glyburide, pioglitazone, pioglitazone, rosiglitazone, glipizide))
dim(df)
# Remove outlier from column 'num_lab_procedures'
quartiles <- quantile(df$num_lab_procedures, probs=c(.25, .75), na.rm = FALSE)
IQR <- IQR(df$num_lab_procedures)
Lower <- quartiles[1] - 1.5*IQR
Upper <- quartiles[2] + 1.5*IQR
count_before <-dim(df)[1]
df<- subset(df, df$num_lab_procedures > Lower & df$num_lab_procedures < Upper)
count_after <-dim(df)[1]
cat(count_before-count_after, " outliers in num_lab_procedures have been removed. \n")
# Remove outliers from column 'number_diagnoses'
quartiles <- quantile(df$number_diagnoses, probs=c(.25, .75), na.rm = FALSE)
IQR <- IQR(df$number_diagnoses)
Lower <- quartiles[1] - 1.5*IQR
Upper <- quartiles[2] + 1.5*IQR
count_before <-dim(df)[1]
df <- subset(df, df$number_diagnoses > Lower & df$number_diagnoses < Upper)
count_after <-dim(df)[1]
cat(count_before-count_after, " outliers in number_diagnoses have been removed. \n")
# Remove outliers from column 'num_medications'
quartiles <- quantile(df$num_medications, probs=c(.25, .75), na.rm = FALSE)
IQR <- IQR(df$num_medications)
Lower <- quartiles[1] - 2*IQR
Upper <- quartiles[2] + 2*IQR
count_before <-dim(df)[1]
df <- subset(df, df$num_medications > Lower & df$num_medications < Upper)
count_after <-dim(df)[1]
cat(count_before-count_after, " outliers in num_medications have been removed. \n")
#Convert categorical variables into factors (according to Table 1 https://www.hindawi.com/journals/bmri/2014/781670/tab1/)
df[sapply(df, is.character)] <- lapply(df[sapply(df, is.character)],
as.factor)
df$admission_type_id <- as.factor(df$admission_type_id)
df$discharge_disposition_id <- as.factor(df$discharge_disposition_id)
df$admission_source_id <- as.factor(df$admission_source_id)
# Subset numerical and categorical features into new data frames
library(dplyr)
df_num <- df %>%  select_if(is.integer)
df_cat <- df %>% select_if(is.factor)
# Show numerical variables
cat("These are the numerical features:\n", colnames(df_num), "\n\n")
# Show categorical variables
cat("These are the categorical features:\n", colnames(df_cat), "\n\n")
# Show readmission counts
table(df$readmitted)
library(plyr)
revalue(df$readmitted, c("<30" = "YES")) -> df$readmitted
revalue(df$readmitted, c(">30" = "YES")) -> df$readmitted
# Show readmission counts using binary levels
table(df$readmitted)
summary(df_num)
library(corrplot)
correlations <- cor(df_num)
# Correlation plot
corrplot(correlations, order = "hclust")
correlations
library(Hmisc)
hist.data.frame(df_num)
par(mfrow = c(2,2))
boxplot(df$time_in_hospital ~ df$readmitted, col="blue")
boxplot(df$num_lab_procedures ~ df$readmitted, col="orange")
boxplot(df$number_diagnoses ~ df$readmitted, col="yellow")
boxplot(df$num_medications ~ df$readmitted, col="purple")
par(mfrow = c(2,3))
barplot(table(df$age), main="Distribution of Age",
ylab="Count", col="lightblue",las=2)
barplot(table(df$race), main="Distribution of Race",
ylab="Count", col="orange",las=2)
barplot(table(df$gender), main="Distribution of Gender",
ylab="Count", col="lightblue",las=2)
barplot(table(df$primary_diagnosis), main="Distribution of Primary Diagnosis",
ylab="Count", col="orange", las=2)
barplot(table(df$secondary_diagnosis), main="Distribution of Secondary Diagnosis",
ylab="Count", col="lightblue", las=2)
barplot(table(df$secondary_diagnosis2), main="Distribution of Secondary Diagnosis 2",
ylab="Count", col="orange", las=2)
par(mfrow = c(2,4))
barplot(table(df$metformin), main="Distribution of metformin",
xlab="metformin", ylab="Count", col="cyan")
barplot(table(df$insulin), main="Distribution of insulin",
xlab="insulin", ylab="Count", col="blue")
barplot(table(df$change), main="Distribution of change",
xlab="change", ylab="Count", col="orange")
barplot(table(df$diabetesMed), main="Distribution of diabetesMed",
xlab="diabetesMed", ylab="Count", col="green")
barplot(table(df$admission_type_id), main="Distribution of admission_type_id",
ylab="Count", col="blue",las=2)
barplot(table(df$admission_source_id), main="Distribution of admission_source_id",
ylab="Count", col="lightblue")
barplot(table(df$discharge_disposition_id), main="Distribution of discharge_disposition_id",
ylab="Count", col="lightblue")
#barplot(table(df$medical_specialty), main="Distribution of Race", xlab="Race", ylab="Count", col="cyan")
# Frequency counts
ct_race <- table(df$readmitted, df$race)
ct_gender <- table(df$readmitted, df$gender)
ct_age <- table(df$readmitted, df$age)
ct_admissionType <- table(df$readmitted, df$admission_type_id)
ct_dischargeID <- table(df$readmitted, df$discharge_disposition_id)
ct_admissionSource <- table(df$readmitted, df$admission_source_id)
ct_metf <- table(df$readmitted, df$metformin)
ct_insulin <- table(df$readmitted, df$insulin)
ct_change <- table(df$readmitted, df$change)
ct_diabMeds <- table(df$readmitted, df$diabetesMed)
# Create contingency tables showing proportions
(ct_race1 <- prop.table(table(df$readmitted, df$race),2))
(ct_gender1 <- prop.table(table(df$readmitted, df$gender),2))
(ct_age1 <- prop.table(table(df$readmitted, df$age),2))
(ct_admissionType1 <- prop.table(table(df$readmitted, df$admission_type_id),2))
(ct_dischargeID1 <- prop.table(table(df$readmitted, df$discharge_disposition_id),2))
(ct_admissionSource1 <- prop.table(table(df$readmitted, df$admission_source_id),2))
(ct_metf1 <- prop.table(table(df$readmitted, df$metformin),2))
(ct_insulin1 <- prop.table(table(df$readmitted, df$insulin),2))
(ct_change1 <- prop.table(table(df$readmitted, df$change),2))
(ct_diabMeds1 <- prop.table(table(df$readmitted, df$diabetesMed),2))
## Create barplots ##
# Patient Demographics (Legend removed for individual graphs where bars would be blocked)
par(mfrow=c(3,2))
barplot(ct_age1,main="Age Group",xlab="Age Group",ylab="Readmitted",col=c("blue", "orange"))
barplot(ct_race1,main="Race",xlab="Race",ylab="Readmitted",col=c("blue", "orange"),las=2)
barplot(ct_gender1,main="Gender",xlab="Gender",ylab="Readmitted",col=c("blue", "orange"),legend=rownames(ct_gender1))
barplot(ct_dischargeID1,main="Discharge ID",xlab="Discharge ID",ylab="Readmitted",col=c("blue", "orange"))
# General encounter information
par(mfrow=c(2,3))
barplot(ct_admissionSource1,main="Admission Source",xlab="Admission Source",ylab="Readmitted",col=c("blue", "orange"),las=2)
barplot(ct_admissionType1,main="Admission Type",xlab="Admission Type",ylab="Readmitted",col=c("blue", "orange"))
# All medications
barplot(ct_metf1,main="Metformin",xlab="Metformin",ylab="Readmitted",col=c("blue", "orange"),legend=rownames(ct_metf1))
barplot(ct_insulin1,main="Insulin",xlab="Insulin",ylab="Readmitted",col=c("blue", "orange"))
barplot(ct_change1,main="Medications Change",xlab="Medications Change",ylab="Readmitted",col=c("blue", "orange"))
barplot(ct_diabMeds1,main="Diabetes Medication",xlab="Diabetes Medication",ylab="Readmitted",col=c("blue", "orange"))
#Partition the dataset into 70% training and 30% test
set.seed(100)
trainRows <- createDataPartition(df$readmitted, p=0.70, list=FALSE)
train <- df[trainRows, ]
test <- df[-trainRows, ]
dim(train)
dim(test)
(trainResponse<-table(train$readmitted))
prop.table(trainResponse)
#Read in data, replace "?" with NA values
df <- read.csv(file = "diabetic_data.csv", na.strings=c("?"))
dim(df)
str(df)
dischargedRemoved <- c(11,13,14,19,20,21)
df <- subset(df, !(discharge_disposition_id %in% dischargedRemoved))
library(dplyr)
n_distinct(df$encounter_id)
n_distinct(df$patient_nbr)
df <- df[!duplicated(df$patient_nbr), ]
dim(df)
library(caret)
degenerateCols <- nearZeroVar(df)
length(degenerateCols)
degenerateColNames <- colnames(df[degenerateCols])
degenerateColNum <- length(degenerateColNames)
cat("These are ", degenerateColNum, " degenerated predictors:\n", degenerateColNames)
#subset the degenerated predictors
df_degenerated <- df[,degenerateColNames]
colnames(df_degenerated)
# Check the distribution of the degenerated predictors
summary(df_degenerated)
# Use nearZeroVar function to filter out low variance features
df<- df[, -degenerateCols]
dim(df)
colnames(df)
admissionsourceRemoved <- c(9,17,20)
df$admission_source_id[df$admission_source_id %in% admissionsourceRemoved] <- NA
admissiontypeRemoved <- c(6,8)
df$admission_type_id[df$admission_type_id %in% admissiontypeRemoved] <- NA
table(df$admission_source_id)
sum(is.na(df$admission_source_id))
# Check null values
#Show null counts
null_counts <- sort(colSums(is.na(df)), decreasing=TRUE)
head(null_counts,10)
#Show proportion of null counts
nullProp <- sort(colMeans(is.na(df)), decreasing=TRUE)
head(nullProp,10)
df<- subset(df, select = -c(weight, medical_specialty, payer_code))
# Convert to numeric
df$diag_1 <- as.numeric(df$diag_1)
df$diag_2 <- as.numeric(df$diag_2)
df$diag_3 <- as.numeric(df$diag_3)
# Show distributions of diagnoses
par(mfrow=c(1,3))
hist(df$diag_1)
hist(df$diag_2)
hist(df$diag_3)
summary(df$diag_1)
library(dplyr)
df <- df %>%
mutate(primary_diagnosis = case_when(
substr(diag_1, 1, 3) == "250" ~ "Diabetes",
#between(as.numeric(diag_1), 001, 139) ~ "Infectious and Parasitic Diseases",
between(as.numeric(diag_1), 140, 239) ~ "Neoplasms",
between(as.numeric(diag_1), 320, 459) ~ "Circulatory",
between(as.numeric(diag_1), 460, 519) ~ "Respiratory",
between(as.numeric(diag_1), 520, 579) ~ "Digestive",
between(as.numeric(diag_1), 580, 629) ~ "Genitourinary System",
#between(as.numeric(diag_1), 680, 709) ~ "Skin/Subcutaneous Tissue",
between(as.numeric(diag_1), 710, 739) ~ "Musculoskeletal",
between(as.numeric(diag_1), 760, 779) ~ "Perinatal",
between(as.numeric(diag_1), 800, 999) ~ "Injury and Poisoning",
TRUE ~ "Other"
))
# Secondary Diagnosis
df <- df %>%
mutate(secondary_diagnosis = case_when(
substr(diag_2, 1, 3) == "250" ~ "Diabetes",
#between(as.numeric(diag_2), 001, 139) ~ "Infectious and Parasitic Diseases",
between(as.numeric(diag_2), 140, 239) ~ "Neoplasms",
between(as.numeric(diag_2), 320, 459) ~ "Circulatory",
between(as.numeric(diag_2), 460, 519) ~ "Respiratory",
between(as.numeric(diag_2), 520, 579) ~ "Digestive",
between(as.numeric(diag_2), 580, 629) ~ "Genitourinary System",
#between(as.numeric(diag_2), 680, 709) ~ "Skin/Subcutaneous Tissue",
between(as.numeric(diag_2), 710, 739) ~ "Musculoskeletal",
between(as.numeric(diag_2), 760, 779) ~ "Perinatal",
between(as.numeric(diag_2), 800, 999) ~ "Injury and Poisoning",
TRUE ~ "Other"
))
# Secondary Diagnosis
df <- df %>%
mutate(secondary_diagnosis2 = case_when(
substr(diag_3, 1, 3) == "250" ~ "Diabetes",
#between(as.numeric(diag_3), 001, 139) ~ "Infectious and Parasitic Diseases",
between(as.numeric(diag_3), 140, 239) ~ "Neoplasms",
between(as.numeric(diag_3), 320, 459) ~ "Circulatory",
between(as.numeric(diag_3), 460, 519) ~ "Respiratory",
between(as.numeric(diag_3), 520, 579) ~ "Digestive",
between(as.numeric(diag_3), 580, 629) ~ "Genitourinary System",
#between(as.numeric(diag_3), 680, 709) ~ "Skin/Subcutaneous Tissue",
between(as.numeric(diag_3), 710, 739) ~ "Musculoskeletal",
between(as.numeric(diag_3), 760, 779) ~ "Perinatal",
between(as.numeric(diag_3), 800, 999) ~ "Injury and Poisoning",
TRUE ~ "Other"
))
df$primary_diagnosis <- as.factor(df$primary_diagnosis)
df$secondary_diagnosis <- as.factor(df$secondary_diagnosis)
df$secondary_diagnosis2 <- as.factor(df$secondary_diagnosis2)
table(df$primary_diagnosis)
table(df$secondary_diagnosis)
table(df$secondary_diagnosis2)
df <- subset(df, select = -c(encounter_id, patient_nbr, diag_1, diag_2,diag_3, number_emergency, number_outpatient, number_inpatient, A1Cresult, glyburide, pioglitazone, pioglitazone, rosiglitazone, glipizide))
dim(df)
# Remove outlier from column 'num_lab_procedures'
quartiles <- quantile(df$num_lab_procedures, probs=c(.25, .75), na.rm = FALSE)
IQR <- IQR(df$num_lab_procedures)
Lower <- quartiles[1] - 1.5*IQR
Upper <- quartiles[2] + 1.5*IQR
count_before <-dim(df)[1]
df<- subset(df, df$num_lab_procedures > Lower & df$num_lab_procedures < Upper)
count_after <-dim(df)[1]
cat(count_before-count_after, " outliers in num_lab_procedures have been removed. \n")
# Remove outliers from column 'number_diagnoses'
quartiles <- quantile(df$number_diagnoses, probs=c(.25, .75), na.rm = FALSE)
IQR <- IQR(df$number_diagnoses)
Lower <- quartiles[1] - 1.5*IQR
Upper <- quartiles[2] + 1.5*IQR
count_before <-dim(df)[1]
df <- subset(df, df$number_diagnoses > Lower & df$number_diagnoses < Upper)
count_after <-dim(df)[1]
cat(count_before-count_after, " outliers in number_diagnoses have been removed. \n")
# Remove outliers from column 'num_medications'
quartiles <- quantile(df$num_medications, probs=c(.25, .75), na.rm = FALSE)
IQR <- IQR(df$num_medications)
Lower <- quartiles[1] - 2*IQR
Upper <- quartiles[2] + 2*IQR
count_before <-dim(df)[1]
df <- subset(df, df$num_medications > Lower & df$num_medications < Upper)
count_after <-dim(df)[1]
cat(count_before-count_after, " outliers in num_medications have been removed. \n")
#Convert categorical variables into factors (according to Table 1 https://www.hindawi.com/journals/bmri/2014/781670/tab1/)
df[sapply(df, is.character)] <- lapply(df[sapply(df, is.character)],
as.factor)
df$admission_type_id <- as.factor(df$admission_type_id)
df$discharge_disposition_id <- as.factor(df$discharge_disposition_id)
df$admission_source_id <- as.factor(df$admission_source_id)
# Subset numerical and categorical features into new data frames
library(dplyr)
df_num <- df %>%  select_if(is.integer)
df_cat <- df %>% select_if(is.factor)
# Show numerical variables
cat("These are the numerical features:\n", colnames(df_num), "\n\n")
# Show categorical variables
cat("These are the categorical features:\n", colnames(df_cat), "\n\n")
# Show readmission counts
table(df$readmitted)
library(plyr)
revalue(df$readmitted, c("<30" = "YES")) -> df$readmitted
revalue(df$readmitted, c(">30" = "YES")) -> df$readmitted
# Show readmission counts using binary levels
table(df$readmitted)
summary(df_num)
library(corrplot)
correlations <- cor(df_num)
# Correlation plot
corrplot(correlations, order = "hclust")
correlations
library(Hmisc)
hist.data.frame(df_num)
par(mfrow = c(2,2))
boxplot(df$time_in_hospital ~ df$readmitted, col="blue")
boxplot(df$num_lab_procedures ~ df$readmitted, col="orange")
boxplot(df$number_diagnoses ~ df$readmitted, col="yellow")
boxplot(df$num_medications ~ df$readmitted, col="purple")
par(mfrow = c(2,3))
barplot(table(df$age), main="Distribution of Age",
ylab="Count", col="lightblue",las=2)
barplot(table(df$race), main="Distribution of Race",
ylab="Count", col="orange",las=2)
barplot(table(df$gender), main="Distribution of Gender",
ylab="Count", col="lightblue",las=2)
barplot(table(df$primary_diagnosis), main="Distribution of Primary Diagnosis",
ylab="Count", col="orange", las=2)
barplot(table(df$secondary_diagnosis), main="Distribution of Secondary Diagnosis",
ylab="Count", col="lightblue", las=2)
barplot(table(df$secondary_diagnosis2), main="Distribution of Secondary Diagnosis 2",
ylab="Count", col="orange", las=2)
par(mfrow = c(2,4))
barplot(table(df$metformin), main="Distribution of metformin",
xlab="metformin", ylab="Count", col="cyan")
barplot(table(df$insulin), main="Distribution of insulin",
xlab="insulin", ylab="Count", col="blue")
barplot(table(df$change), main="Distribution of change",
xlab="change", ylab="Count", col="orange")
barplot(table(df$diabetesMed), main="Distribution of diabetesMed",
xlab="diabetesMed", ylab="Count", col="green")
barplot(table(df$admission_type_id), main="Distribution of admission_type_id",
ylab="Count", col="blue",las=2)
barplot(table(df$admission_source_id), main="Distribution of admission_source_id",
ylab="Count", col="lightblue")
barplot(table(df$discharge_disposition_id), main="Distribution of discharge_disposition_id",
ylab="Count", col="lightblue")
#barplot(table(df$medical_specialty), main="Distribution of Race", xlab="Race", ylab="Count", col="cyan")
# Frequency counts
ct_race <- table(df$readmitted, df$race)
ct_gender <- table(df$readmitted, df$gender)
ct_age <- table(df$readmitted, df$age)
ct_admissionType <- table(df$readmitted, df$admission_type_id)
ct_dischargeID <- table(df$readmitted, df$discharge_disposition_id)
ct_admissionSource <- table(df$readmitted, df$admission_source_id)
ct_metf <- table(df$readmitted, df$metformin)
ct_insulin <- table(df$readmitted, df$insulin)
ct_change <- table(df$readmitted, df$change)
ct_diabMeds <- table(df$readmitted, df$diabetesMed)
# Create contingency tables showing proportions
(ct_race1 <- prop.table(table(df$readmitted, df$race),2))
(ct_gender1 <- prop.table(table(df$readmitted, df$gender),2))
(ct_age1 <- prop.table(table(df$readmitted, df$age),2))
(ct_admissionType1 <- prop.table(table(df$readmitted, df$admission_type_id),2))
(ct_dischargeID1 <- prop.table(table(df$readmitted, df$discharge_disposition_id),2))
(ct_admissionSource1 <- prop.table(table(df$readmitted, df$admission_source_id),2))
(ct_metf1 <- prop.table(table(df$readmitted, df$metformin),2))
(ct_insulin1 <- prop.table(table(df$readmitted, df$insulin),2))
(ct_change1 <- prop.table(table(df$readmitted, df$change),2))
(ct_diabMeds1 <- prop.table(table(df$readmitted, df$diabetesMed),2))
## Create barplots ##
# Patient Demographics (Legend removed for individual graphs where bars would be blocked)
par(mfrow=c(3,2))
barplot(ct_age1,main="Age Group",xlab="Age Group",ylab="Readmitted",col=c("blue", "orange"))
barplot(ct_race1,main="Race",xlab="Race",ylab="Readmitted",col=c("blue", "orange"),las=2)
barplot(ct_gender1,main="Gender",xlab="Gender",ylab="Readmitted",col=c("blue", "orange"),legend=rownames(ct_gender1))
barplot(ct_dischargeID1,main="Discharge ID",xlab="Discharge ID",ylab="Readmitted",col=c("blue", "orange"))
# General encounter information
par(mfrow=c(2,3))
barplot(ct_admissionSource1,main="Admission Source",xlab="Admission Source",ylab="Readmitted",col=c("blue", "orange"),las=2)
barplot(ct_admissionType1,main="Admission Type",xlab="Admission Type",ylab="Readmitted",col=c("blue", "orange"))
# All medications
barplot(ct_metf1,main="Metformin",xlab="Metformin",ylab="Readmitted",col=c("blue", "orange"),legend=rownames(ct_metf1))
barplot(ct_insulin1,main="Insulin",xlab="Insulin",ylab="Readmitted",col=c("blue", "orange"))
barplot(ct_change1,main="Medications Change",xlab="Medications Change",ylab="Readmitted",col=c("blue", "orange"))
barplot(ct_diabMeds1,main="Diabetes Medication",xlab="Diabetes Medication",ylab="Readmitted",col=c("blue", "orange"))
#Separate X and Y using readmitted as predicted variable
dfX <- subset(df, select = -c(readmitted))
dfY <- subset(df, select = c(readmitted))
set.seed(100)
# Partition the dataset
trainRows <- createDataPartition(dfY$readmitted, p = .70, list = FALSE)
trainX <- dfX[trainRows,]
testX <-  dfX[-trainRows,]
trainY <- dfY[trainRows,]
testY <- dfY[-trainRows,]
dim(trainX)
dim(testX)
(trainResponse<-table(train$readmitted))
prop.table(trainResponse)
# center and scale the training set
train_tran <- preProcess(trainX, method=c("center", "scale"))
trainX <- predict(train_tran, trainX)
# center and scale the test set
testX <- predict(train_tran, testX)
library(fastDummies)
# Some models do not require dummy variable, like the trees
# Will use these two for modeling and testing
trainX_noDummy <- trainX
testX_noDummy <- testX
# trainX <- dummy_cols(trainX,
#            select_columns=c("gender","age","admission_type_id","discharge_disposition_id", "A1Cresult","admission_source_id", "metformin", "glipizide", "glyburide","pioglitazone", "rosiglitazone", "insulin", "change","diabetesMed"),
#            remove_first_dummy=TRUE, remove_selected_columns=TRUE)
#
# testX <- dummy_cols(testX,
#            select_columns=c("gender","age","admission_type_id","discharge_disposition_id", "A1Cresult","admission_source_id", "metformin", "glipizide", "glyburide","pioglitazone", "rosiglitazone", "insulin", "change","diabetesMed"),
#            remove_first_dummy=TRUE, remove_selected_columns=TRUE)
trainX <- dummy_cols(trainX,
select_columns=c("gender","age","admission_type_id","discharge_disposition_id","metformin", "insulin", "change","diabetesMed", "admission_source_id","primary_diagnosis", "secondary_diagnosis", "secondary_diagnosis2"),
remove_first_dummy=TRUE, remove_selected_columns=TRUE)
testX <- dummy_cols(testX,
select_columns=c("gender","age","admission_type_id","discharge_disposition_id","metformin", "insulin", "change","diabetesMed", "admission_source_id","primary_diagnosis","secondary_diagnosis", "secondary_diagnosis2"),
remove_first_dummy=TRUE, remove_selected_columns=TRUE)
dim(trainX)
dim(testX)
dim(trainX_noDummy)
dim(testX_noDummy)
# Find the PCA from the training set
# pca <- prcomp(trainX)
# pca_var <- pca$sdev^2
# Find the percentage of each PCA component
# pca_percents <- pca_var / sum(pca_var)
# cat("Percentage of the first 15 PCAs: ", pca_percents[1:15], "\n")
# The total percentage of the first 50 PCAs
# cat("The total percentage of the first 50 PCAs: ", sum(pca_percents[1:50]), "\n")
